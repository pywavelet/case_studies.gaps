import matplotlib.colors
import numpy as np
from tqdm import tqdm
import matplotlib.pyplot as plt
from typing import Callable, Union


class CovarianceEstimator:
    def __init__(self, cov_matrix: np.ndarray, n_samples: int):
        """
        Initialize the estimator with a noise generator and number of samples.

        Parameters
        ----------
        noise_generator : callable
            A function that takes an integer seed and returns a noise instance (e.g., a 1D numpy array).
        n_samples : int, optional
            The number of noise samples to generate (default is 5000).
        """
        self.n_samples = n_samples
        self.cov_matrix = cov_matrix

    @property
    def correlation_matrix(self):
        if not hasattr(self, '_correlation_matrix'):
            self._correlation_matrix = self.covariance_to_correlation(self.cov_matrix)
        return self._correlation_matrix

    @classmethod
    def from_generator(cls, noise_generator: Callable[[int], np.ndarray], n_samples=5000):
        """
        Estimate the covariance matrix from noise samples generated by the noise generator.

        Returns
        -------
        cov_matrix : ndarray
            The estimated covariance matrix computed from the noise samples.
        """
        noise_samples = []
        for seed in tqdm(range(n_samples), desc=f"Generating noise samples {noise_generator}"):
            sample = noise_generator(seed)
            noise_samples.append(sample)

        # Convert list to a 2D numpy array with shape (n_samples, n_features)
        noise_samples = np.array(noise_samples)
        print("Computing covariance matrix for noise samples of shape:", noise_samples.shape)
        cov_matrix = np.cov(noise_samples, rowvar=False, dtype=np.float64)
        print("Covariance matrix estimated successfully. Shape:", cov_matrix.shape)
        return cls(cov_matrix, n_samples)

    @classmethod
    def from_savefile(cls, filename: str):
        """
        Load a covariance matrix from a file.

        Parameters
        ----------
        filename : str
            The filename to load the covariance matrix from.
        """
        with np.load(filename) as data:
            cov_matrix = data['cov_matrix']
            n_samples = data['N']
        return cls(cov_matrix, n_samples)

    @staticmethod
    def covariance_to_correlation(cov_matrix):
        """
        Convert a covariance matrix to a correlation matrix.

        Parameters
        ----------
        cov_matrix : ndarray
            Covariance matrix.

        Returns
        -------
        corr_matrix : ndarray
            Correlation matrix, where diagonal entries are 1 and off-diagonals are in [-1, 1].
        """
        std_dev = np.sqrt(np.diag(cov_matrix))
        outer_std = np.outer(std_dev, std_dev)
        # Prevent division by zero
        outer_std[outer_std == 0] = 1e-10
        corr_matrix = cov_matrix / outer_std
        corr_matrix = np.clip(corr_matrix, -1, 1)
        return corr_matrix

    @staticmethod
    def plot_matrix(matrix, title="Matrix", xlabel="Index", ylabel="Index", cmap='viridis', ax=None, logscale=None,
                    show_colorbar=True,
                    **kwargs):
        """
        Plot a matrix as a heatmap.

        Parameters
        ----------
        matrix : ndarray
            The matrix to plot.
        title : str, optional
            Title for the plot.
        xlabel : str, optional
            Label for the x-axis.
        ylabel : str, optional
            Label for the y-axis.
        cmap : str, optional
            Colormap to use (default is 'viridis').
        """
        if ax is None:
            fig, ax = plt.subplots()
        fig = ax.get_figure()

        if logscale is None:
            # detect if logscale is needed
            logscale = (matrix.max() / matrix.min()) > 1000 or matrix.max() < 1e-3

        norm = None
        if logscale:
            matrix = np.abs(matrix)
            norm = matplotlib.colors.LogNorm(vmin=matrix.min(), vmax=matrix.max())

        im = ax.imshow(matrix, cmap=cmap, interpolation='none', norm=norm, **kwargs)
        # add colorbar to right of axis
        if show_colorbar:
            plt.colorbar(im, ax=ax, fraction=0.046, pad=0.04)
        ax.set_title(title)
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        return fig, ax


    @property
    def avg_abs_off_correlation(self):
        corr_matrix = self.correlation_matrix
        total_abs_correlation = np.sum(np.abs(corr_matrix)) - np.trace(np.abs(corr_matrix))
        n = corr_matrix.shape[0]
        average_abs_correlation = total_abs_correlation / (n * (n - 1))
        return average_abs_correlation




    def plot_covariance(self, title="Covariance Matrix", ax=None):
        """
        Plot the estimated covariance matrix.

        Parameters
        ----------
        title : str, optional
            Title for the covariance plot.
        """
        return self.plot_matrix(self.cov_matrix, title=title, xlabel="Feature index", ylabel="Feature index", cmap='viridis',
                         ax=ax)

    def plot_correlation(self, title="Correlation Matrix", ax=None, show_colorbar=True):
        """
        Compute the correlation matrix from the estimated covariance matrix and plot it.

        Parameters
        ----------
        title : str, optional
            Title for the correlation plot.
        """
        corr_matrix = self.correlation_matrix
        return self.plot_matrix(corr_matrix, title=title, xlabel="Feature index", ylabel="Feature index", cmap='coolwarm',
                         vmin=-1, vmax=1, ax=ax, show_colorbar=show_colorbar)

    def save(self, filename):
        """
        Save the estimated covariance matrix to a file.

        Parameters
        ----------
        filename : str
            The filename to save the covariance matrix to.
        """

        # save the covar matrix along with N
        np.savez(filename, cov_matrix=self.cov_matrix, N=self.n_samples)

    def plot(self, fname: str, title=""):
        """
        Plot the covariance and correlation matrices and save them to a file.

        Parameters
        ----------
        fname : str
            The filename to save the plots to.
        """
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        self.plot_covariance(ax=ax[0])
        self.plot_correlation(ax=ax[1])
        if title:
            plt.suptitle(title)
        plt.tight_layout()
        plt.savefig(fname)
        plt.close()


# Example usage:
if __name__ == "__main__":
    # Example noise generator: generates a noise vector of length 100 drawn from a standard normal distribution.
    def example_noise_generator(seed: int):
        np.random.seed(seed)
        return np.random.randn(100)


    estimator = CovarianceEstimator.from_generator(example_noise_generator, n_samples=5000)
    estimator.plot('test.png')
    print(estimator.avg_abs_off_correlation)